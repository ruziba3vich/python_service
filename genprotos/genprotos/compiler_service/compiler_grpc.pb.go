// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.1
// source: compiler_protos/compiler.proto

package compiler_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CodeExecutor_Execute_FullMethodName = "/compiler.CodeExecutor/Execute"
)

// CodeExecutorClient is the client API for CodeExecutor service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CodeExecutorClient interface {
	Execute(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[ExecuteRequest, ExecuteResponse], error)
}

type codeExecutorClient struct {
	cc grpc.ClientConnInterface
}

func NewCodeExecutorClient(cc grpc.ClientConnInterface) CodeExecutorClient {
	return &codeExecutorClient{cc}
}

func (c *codeExecutorClient) Execute(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[ExecuteRequest, ExecuteResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &CodeExecutor_ServiceDesc.Streams[0], CodeExecutor_Execute_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ExecuteRequest, ExecuteResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type CodeExecutor_ExecuteClient = grpc.BidiStreamingClient[ExecuteRequest, ExecuteResponse]

// CodeExecutorServer is the server API for CodeExecutor service.
// All implementations must embed UnimplementedCodeExecutorServer
// for forward compatibility.
type CodeExecutorServer interface {
	Execute(grpc.BidiStreamingServer[ExecuteRequest, ExecuteResponse]) error
	mustEmbedUnimplementedCodeExecutorServer()
}

// UnimplementedCodeExecutorServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCodeExecutorServer struct{}

func (UnimplementedCodeExecutorServer) Execute(grpc.BidiStreamingServer[ExecuteRequest, ExecuteResponse]) error {
	return status.Errorf(codes.Unimplemented, "method Execute not implemented")
}
func (UnimplementedCodeExecutorServer) mustEmbedUnimplementedCodeExecutorServer() {}
func (UnimplementedCodeExecutorServer) testEmbeddedByValue()                      {}

// UnsafeCodeExecutorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CodeExecutorServer will
// result in compilation errors.
type UnsafeCodeExecutorServer interface {
	mustEmbedUnimplementedCodeExecutorServer()
}

func RegisterCodeExecutorServer(s grpc.ServiceRegistrar, srv CodeExecutorServer) {
	// If the following call pancis, it indicates UnimplementedCodeExecutorServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CodeExecutor_ServiceDesc, srv)
}

func _CodeExecutor_Execute_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CodeExecutorServer).Execute(&grpc.GenericServerStream[ExecuteRequest, ExecuteResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type CodeExecutor_ExecuteServer = grpc.BidiStreamingServer[ExecuteRequest, ExecuteResponse]

// CodeExecutor_ServiceDesc is the grpc.ServiceDesc for CodeExecutor service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CodeExecutor_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "compiler.CodeExecutor",
	HandlerType: (*CodeExecutorServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Execute",
			Handler:       _CodeExecutor_Execute_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "compiler_protos/compiler.proto",
}
